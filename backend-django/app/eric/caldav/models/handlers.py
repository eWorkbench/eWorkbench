#
# Copyright (C) 2016-2020 TU Muenchen and contributors of ANEXIA Internetdienstleistungs GmbH
# SPDX-License-Identifier: AGPL-3.0-or-later
#
import vobject
from django.db.models.signals import post_save
from django.dispatch import receiver

from eric.caldav.models import CaldavItem
from eric.shared_elements.models import Meeting, UserAttendsMeeting, ContactAttendsMeeting


@receiver(post_save)
def ensure_caldav_item_for_meeting_is_correct(instance, created, *args, **kwargs):
    """
    After a meeting was created or updated, we need to make sure it has a CaldavItem and that the ical text is set
    properly
    :param eric.shared_elements.models.Meeting instance:
    :param created:
    :param args:
    :param kwargs:
    :return:
    """
    if isinstance(instance, Meeting):
        meeting = instance
    elif isinstance(instance, UserAttendsMeeting) or isinstance(instance, ContactAttendsMeeting):
        meeting = instance.meeting
    else:
        # ignore
        return

    # try to access the back relation of caldav item
    caldav_item, created = CaldavItem.objects.get_or_create(
        meeting=meeting,
        defaults={
            # fake the name
            'name': "{}-autogenerated.ics".format(meeting.pk)
        }
    )

    if created:
        # create the ical text by using the original meeting export function
        event = meeting.export_as_ical()
    else:
        # modifying an existing element: edit the existing ical information
        event = vobject.readOne(caldav_item.text)
        meeting.export_as_ical(event=event)

    caldav_item.text = event.serialize()
    caldav_item.set_deleted(meeting.deleted)
    caldav_item.save()
