#
# Copyright (C) 2016-2020 TU Muenchen and contributors of ANEXIA Internetdienstleistungs GmbH
# SPDX-License-Identifier: AGPL-3.0-or-later
#
from vobject.base import ParseError

from eric.caldav.models import CaldavItem
from eric.shared_elements.models import vobject, logging

LOGGER = logging.getLogger(__name__)


def get_or_create_caldav_item_for_meeting(meeting):
    caldav_item, created = CaldavItem.objects.get_or_create(
        meeting=meeting,
        defaults={
            'name': "{}-autogenerated.ics".format(meeting.pk)
        }
    )

    if created:
        # fill meeting data into CalDavItem
        update_caldav_item(caldav_item, meeting)

    return caldav_item


def create_or_update_caldav_item_for_meeting(meeting, name=None):
    caldav_item = get_or_create_caldav_item_for_meeting(meeting)
    update_caldav_item(caldav_item, meeting, name=name)


def update_caldav_item(caldav_item, meeting, name=None):
    event = read_or_create_ical_event(caldav_item, meeting)

    if name:
        caldav_item.name = name

    caldav_item.text = event.serialize()
    caldav_item.set_deleted(meeting.deleted)
    caldav_item.save()


def read_or_create_ical_event(caldav_item, meeting):
    event = None

    if caldav_item and caldav_item.text:
        try:
            event = vobject.readOne(caldav_item.text)
        except ParseError as e:
            LOGGER.error('Failed to parse VEvent data of CalDavItem {}'.format(caldav_item.pk))
            LOGGER.error(e)

    # update event for latest meeting data
    return meeting.export_as_ical(event=event)
